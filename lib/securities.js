// Generated by CoffeeScript 1.10.0

/* 智能化的投資品種,
  根據行情結構,應對最新行情作出相應操作
  將逐步演化完善
  以下代碼等名目,僅僅是用於對接現有的Python接口,將來系統中都可以統一換成中文
 */
var Securities, Security, util,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

util = require('util');

Security = (function() {
  function Security(master, 代碼, 策略, 百分比) {
    this.百分比 = 百分比 != null ? 百分比 : 0.618;
    this.init = bind(this.init, this);

    /* 經過如下處理,@對策 function中的this即此證券品種
     */
    this.策略 = 策略;
    this.對策 = this.策略.對策;
    this.代碼 = 代碼;
    this.就緒 = false;

    /*
    @策略.定制 master, this, (err,done)=>
      unless err?
        @就緒 = true
        #util.log "securities.coffee >> 生成", @代碼
     */
  }

  Security.prototype.init = function(master, 回執) {
    return this.策略.定制(master, this, (function(_this) {
      return function(err, done) {
        if (err == null) {
          _this.就緒 = true;
          return 回執(err, done);
        }
      };
    })(this));
  };

  Security.prototype.應對 = function(最新, 回執) {
    return this.對策(最新, 回執);
  };

  Security.prototype.clearIntervals = function() {
    var each, i, len, ref, results;
    ref = this.intervals;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      each = ref[i];
      results.push(clearInterval(each));
    }
    return results;
  };

  Security.prototype.toString = function() {
    return "a Security 代碼: " + this.代碼;
  };

  return Security;

})();


/* 目標證券群
  此處控制系統中同一個策略每一品種僅需一個object

  根據外部所提供行情,以及預定策略,實時決策操作
 */


/*
  @symbols: ['135333','xxdge']
 */

Securities = (function() {
  function Securities(symbols1, 策略1) {
    var i, len, ref, symbol;
    this.symbols = symbols1;
    this.策略 = 策略1;
    this.清潔 = false;
    this.position = null;
    this.品種 = {};
    ref = this.symbols;
    for (i = 0, len = ref.length; i < len; i++) {
      symbol = ref[i];

      /*
      證券 = new Security(this, symbol, @策略)
      證券.init (err,done)->
        unless err?
          if done
            @品種[symbol] = 證券
       */
      this.生成載入(symbol);
    }
  }

  Securities.prototype.生成載入 = function(symbol) {
    var 證券;
    證券 = new Security(this, symbol, this.策略);
    this.品種[symbol] = 證券;
    return 證券.init(this, function(err, done) {
      if (err == null) {
        if (done) {
          return console.log(證券);
        }
      }
    });
  };


  /* 從券商賬戶讀取的持倉品種,必須繼續跟蹤,以便止盈止損
   */

  Securities.prototype.持倉品種 = function(symbols) {

    /* @position存在,
      表明已經匯集了持倉品種,可以執行後續分析
     */
    var i, len, symbol;
    if (this.position == null) {
      this.position = [];
    }
    if (symbols != null) {
      for (i = 0, len = symbols.length; i < len; i++) {
        symbol = symbols[i];
        if (indexOf.call(this.position, symbol) < 0) {
          this.position.push(symbol);
        }
      }
    }
    return this.更新品種(symbols);
  };

  Securities.prototype.更新品種 = function(symbols) {
    var i, len, results, symbol;
    if (symbols != null) {
      results = [];
      for (i = 0, len = symbols.length; i < len; i++) {
        symbol = symbols[i];
        if (indexOf.call(this.symbols, symbol) < 0) {

          /* 須檢測 symbol 是否正常?
          #if symbol.length is 6
           */
          this.symbols.push(symbol);
          results.push(this.生成載入(symbol));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

  Securities.prototype.濾過 = function(symbol) {
    var ref;
    if (this.清潔) {
      if ((ref = this.品種[symbol]) != null ? ref.就緒 : void 0) {

        /** 過濾層一. 可觀察的超跌低位品種不管他,留下來
        *
         */
        if (!this.品種[symbol].可觀察) {

          /** 若有此變量,則表明已經匯集好持倉品種,可以執行以下操作
          *
           */
          if (this.position != null) {

            /** 過濾層二. 持倉的品種,即使非可觀察低位品種,也必須留下來,作止盈止損監控
              其他的,當天都不必跟蹤了
            *
             */
            if (indexOf.call(this.position, symbol) < 0) {
              this.品種[symbol].clearIntervals();
              delete this.品種[symbol];
              this.symbols.splice(this.symbols.indexOf(symbol), 1);
              return util.log("securities >> 監控範圍" + this.symbols.length + "個品種: " + this.symbols);
            }
          }
        }
      }
    }
  };

  Securities.prototype.應對 = function(jso, 回執) {
    var code, results, symbol, tick;
    results = [];
    for (code in jso) {
      tick = jso[code];
      symbol = tick.代碼;
      if (indexOf.call(this.symbols, symbol) < 0) {
        util.log('securities.coffee>> 應對 新出現 tick.代碼:', symbol);
        if (symbol !== 'sz') {
          this.symbols.push(symbol);
          this.品種[symbol] = new Security(this, symbol, this.策略);
        }
      }
      if (symbol !== 'sz') {
        this.品種[symbol].應對(tick, 回執);
      }
      results.push(this.濾過(symbol));

      /*
      if @清潔
        if @品種[symbol]?.就緒
          unless @品種[symbol].可觀察
            if @position? # 若有此變量,則表明已經匯集好持倉品種,可以執行以下操作
              if symbol not in @position
                @品種[symbol].clearIntervals()
                delete @品種[symbol]
                @symbols.splice(@symbols.indexOf(symbol),1)
                util.log "securities >> 監控: #{@symbols}"
       */
    }
    return results;
  };

  Securities.prototype.clearIntervals = function() {
    var each, i, len, ref, results;
    util.log('securities>> clearIntervals');
    ref = this.symbols;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      each = ref[i];
      results.push(this.品種[each].clearIntervals());
    }
    return results;
  };

  return Securities;

})();

module.exports = Securities;

//# sourceMappingURL=securities.js.map
