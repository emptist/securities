// Generated by CoffeeScript 1.10.0
var Securities, Security, hists, 分鐘, 小時, 秒,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

hists = require('sedata').hists;


/* 智能化的投資品種,
  根據行情結構,應對最新行情作出相應操作
  將逐步演化完善
  以下代碼等名目,僅僅是用於對接現有的Python接口,將來系統中都可以統一換成中文
 */

秒 = 1000;

分鐘 = 60 * 秒;

小時 = 60 * 分鐘;

Security = (function() {
  function Security(master, 代碼, 策略, 百分比) {
    this.代碼 = 代碼;
    this.策略 = 策略;
    this.百分比 = 百分比 != null ? 百分比 : 0.618;

    /* 經過如下處理,@對策 function中的this即此證券品種
     */
    this.對策 = this.策略.對策;
    this.策略.定制(master, this, function(err, done) {
      if (err == null) {
        return console.log("生成", this.代碼);
      }
    });
  }

  Security.prototype.clearIntervals = function() {
    var each, i, len, ref, results;
    ref = [this.iM05, this.iDay, this.iWeek];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      each = ref[i];
      results.push(clearInterval(each));
    }
    return results;
  };

  Security.prototype.toString = function() {
    return "a Security 代碼: " + this.代碼;
  };


  /*合適: (回應)->
    @代碼? and 回應 this
  止損: (最新, 回應)->
    @對策(最新, 回應)
  #為何不行? 應對: @止損
   */

  Security.prototype.應對 = function(最新, 回應) {
    return this.對策(最新, 回應);
  };

  return Security;

})();


/* 目標證券群
  此處控制系統中同一個策略每一品種僅需一個object

  根據外部所提供行情,以及預定策略,實時決策操作
 */


/*
  @codes: ['135333','xxdge']
 */

Securities = (function() {
  function Securities(codes1, 策略) {
    var code, i, len, ref;
    this.codes = codes1;
    this.策略 = 策略;
    this.品種 = {};
    ref = this.codes;
    for (i = 0, len = ref.length; i < len; i++) {
      code = ref[i];
      this.品種[code] = new Security(this, code, this.策略);
    }
  }

  Securities.prototype.重載 = function(code) {
    return this.品種[code] = new Security(this, code, this.策略);
  };

  Securities.prototype.更新品種 = function(codes) {
    var code, i, len, results;
    if (codes != null) {
      results = [];
      for (i = 0, len = codes.length; i < len; i++) {
        code = codes[i];
        if (indexOf.call(this.codes, code) < 0) {

          /* 須檢測 code 是否正常?
          #if code.length is 6
           */
          this.codes.push(code);
          results.push(this.重載(code));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

  Securities.prototype.應對 = function(jso, 回應) {
    var code, k, results, tick;
    results = [];
    for (k in jso) {
      tick = jso[k];
      code = tick.代碼;
      if (indexOf.call(this.codes, code) < 0) {
        console.log('securities 應對 新出現 tick.代碼:', code);
        if (code !== 'sz') {
          this.codes.push(code);
          this.品種[code] = new Security(this, code, this.策略);
        }
      }
      if (code !== 'sz') {
        results.push(this.品種[code].應對(tick, 回應));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  Securities.prototype.clearIntervals = function() {
    var each, i, len, ref, results;
    console.log('securities>> clearIntervals');
    ref = this.codes;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      each = ref[i];
      results.push(this.品種[each].clearIntervals());
    }
    return results;
  };

  return Securities;

})();

module.exports = Securities;

//# sourceMappingURL=securities.js.map
