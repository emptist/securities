// Generated by CoffeeScript 1.10.0
var Securities, Security, hists,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

hists = require('sedata').hists;


/* 智能化的投資品種,
  根據行情結構,應對最新行情作出相應操作
  將逐步演化完善
  以下代碼等名目,僅僅是用於對接現有的Python接口,將來系統中都可以統一換成中文
 */

Security = (function() {
  function Security(代碼1, 策略, 百分比) {
    this.代碼 = 代碼1;
    this.策略 = 策略;
    this.百分比 = 百分比 != null ? 百分比 : 0.0618;
    hists({
      symbol: this.代碼,
      type: 'm05'
    }, (function(_this) {
      return function(err, json) {
        if (!err) {
          return _this.五分鐘線 = json;
        }

        /* TODO:
          出錯時換一個數據源再嘗試
         */
      };
    })(this));
    this.對策 = this.策略.對策;
  }

  Security.prototype.toString = function() {
    return "a Security 代碼: " + this.代碼;
  };


  /*合適: (回應)->
    @代碼? and 回應 this
  止損: (最新, 回應)->
    @對策(最新, 回應)
  #為何不行? 應對: @止損
   */

  Security.prototype.應對 = function(最新, 回應) {
    return this.對策(最新, 回應);
  };

  return Security;

})();


/* 目標證券群
  此處控制系統中同一個策略每一品種僅需一個object

  根據外部所提供行情,以及預定策略,實時決策操作
 */


/*
  @codes: ['135333','xxdge']
 */

Securities = (function() {
  function Securities(codes, 策略) {
    var i, len, ref, 代碼;
    this.codes = codes;
    this.策略 = 策略;
    this.品種 = {};
    ref = this.codes;
    for (i = 0, len = ref.length; i < len; i++) {
      代碼 = ref[i];
      this.品種[代碼] = new Security(代碼, this.策略, 0.618);
    }
  }

  Securities.prototype.應對 = function(jso, 回應) {
    var k, results, tick, 代碼;
    results = [];
    for (k in jso) {
      tick = jso[k];
      代碼 = tick.代碼;
      if (indexOf.call(this.codes, 代碼) < 0) {
        this.品種[代碼] = new Security(代碼, this.策略, 0.618);
      }
      results.push(this.品種[代碼].應對(tick, 回應));
    }
    return results;
  };

  return Securities;

})();

module.exports = Securities;

//# sourceMappingURL=securities.js.map
